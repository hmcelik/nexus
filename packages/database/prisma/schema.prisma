// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials-based authentication
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts        Account[]
  sessions        Session[]
  bots            Bot[]
  authoredPlugins Plugin[] @relation("PluginAuthor")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Nexus Bots specific tables
model Bot {
  id          String   @id @default(cuid())
  name        String
  description String?
  platform    Platform
  status      BotStatus @default(DRAFT)
  config      Json?    // Bot configuration and flow data
  tokens      Json?    // Encrypted bot tokens
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bots")
}

enum Platform {
  TELEGRAM
  DISCORD
  SLACK
  WHATSAPP
}

enum BotStatus {
  DRAFT
  ACTIVE
  PAUSED
  ERROR
}

// Plugin system
model Plugin {
  id          String   @id @default(cuid())
  name        String   @unique
  version     String
  description String?
  manifest    Json     // Plugin manifest with nodes, permissions, etc.
  code        String   // Plugin code
  verified    Boolean  @default(false)
  published   Boolean  @default(false)
  downloads   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  authorId String
  author   User   @relation("PluginAuthor", fields: [authorId], references: [id])

  @@map("plugins")
}
